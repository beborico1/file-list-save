{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://massive-copy/external commonjs \"vscode\"","webpack://massive-copy/external node-commonjs \"fs\"","webpack://massive-copy/external node-commonjs \"path\"","webpack://massive-copy/webpack/bootstrap","webpack://massive-copy/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport function activate(context: vscode.ExtensionContext) {\n    // Command to copy selected file types\n    let copySelected = vscode.commands.registerCommand('massive-copy.copySelected', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('massive-copy');\n            const allowedExtensions = config.get('allowedExtensions', ['.py', '.js', '.ts', '.jsx', '.tsx', '.html', '.css', '.json']);\n\n            await copyFiles(allowedExtensions);\n        } catch (error) {\n            console.error('Error in copySelected:', error);\n            vscode.window.showErrorMessage(`Error copying files: ${error}`);\n        }\n    });\n\n    // Command to copy entire repository\n    let copyRepo = vscode.commands.registerCommand('massive-copy.copyRepo', async () => {\n        try {\n            const config = vscode.workspace.getConfiguration('massive-copy');\n            const excludeFolders = config.get('excludeFolders', ['node_modules', 'venv', '.git']);\n\n            await copyRepository(excludeFolders);\n        } catch (error) {\n            console.error('Error in copyRepo:', error);\n            vscode.window.showErrorMessage(`Error copying repository: ${error}`);\n        }\n    });\n\n    context.subscriptions.push(copySelected, copyRepo);\n}\n\nasync function copyFiles(allowedExtensions: string[]) {\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    if (!workspaceFolder) {\n        vscode.window.showErrorMessage('No workspace folder is open.');\n        return;\n    }\n\n    const allTabs = vscode.window.tabGroups.all.flatMap(group =>\n        group.tabs.filter(tab =>\n            tab.input instanceof vscode.TabInputText &&\n            tab.input.uri.scheme === 'file' &&\n            allowedExtensions.includes(path.extname(tab.input.uri.fsPath))\n        )\n    );\n\n    if (allTabs.length === 0) {\n        vscode.window.showInformationMessage('No matching files are currently open.');\n        return;\n    }\n\n    let fullContent = `Total open files: ${allTabs.length}\\n\\n`;\n    for (const tab of allTabs) {\n        if (tab.input instanceof vscode.TabInputText) {\n            const document = await vscode.workspace.openTextDocument(tab.input.uri);\n            const relativePath = path.relative(workspaceFolder.uri.fsPath, document.uri.fsPath);\n            const fileContent = document.getText();\n\n            fullContent += `### File: ${relativePath} ###\\n${fileContent}\\n### End of ${relativePath} ###\\n\\n`;\n        }\n    }\n\n    await vscode.env.clipboard.writeText(fullContent);\n    vscode.window.showInformationMessage(`Copied ${allTabs.length} files to clipboard`);\n}\n\nasync function copyRepository(excludeFolders: string[]) {\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n    if (!workspaceFolder) {\n        vscode.window.showErrorMessage('No workspace folder is open.');\n        return;\n    }\n\n    let fullContent = '';\n    const files = await getAllFiles(workspaceFolder.uri.fsPath, excludeFolders);\n\n    for (const file of files) {\n        const relativePath = path.relative(workspaceFolder.uri.fsPath, file);\n        const content = fs.readFileSync(file, 'utf8');\n        fullContent += `### File: ${relativePath} ###\\n${content}\\n### End of ${relativePath} ###\\n\\n`;\n    }\n\n    await vscode.env.clipboard.writeText(fullContent);\n    vscode.window.showInformationMessage(`Copied repository contents to clipboard`);\n}\n\nasync function getAllFiles(dir: string, excludeFolders: string[]): Promise<string[]> {\n    const entries = fs.readdirSync(dir, { withFileTypes: true });\n    const files: string[] = [];\n\n    for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name);\n\n        if (entry.isDirectory()) {\n            if (!excludeFolders.includes(entry.name)) {\n                files.push(...await getAllFiles(fullPath, excludeFolders));\n            }\n        } else {\n            files.push(fullPath);\n        }\n    }\n\n    return files;\n}"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","copySelected","vscode","commands","registerCommand","async","allowedExtensions","workspace","getConfiguration","get","workspaceFolder","workspaceFolders","window","showErrorMessage","allTabs","tabGroups","all","flatMap","group","tabs","filter","tab","input","TabInputText","uri","scheme","includes","path","extname","fsPath","length","showInformationMessage","fullContent","document","openTextDocument","relativePath","relative","getText","env","clipboard","writeText","copyFiles","error","console","copyRepo","excludeFolders","files","getAllFiles","file","fs","readFileSync","copyRepository","subscriptions","push","dir","entries","readdirSync","withFileTypes","entry","fullPath","join","name","isDirectory"],"sourceRoot":""}