{"version":3,"file":"extension.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,wEClBA,oBAAyBQ,GACrB,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,gCAAgCC,UAC7E,IAEI,MAAMC,EAAkBJ,EAAOK,UAAUC,mBAAmB,GAC5D,IAAKF,EAED,YADAJ,EAAOO,OAAOC,iBAAiB,gCAKnC,MAAMC,EAAUT,EAAOO,OAAOG,UAAUC,IAAIC,SAAQC,GAChDA,EAAMC,KAAKC,QAAOC,GACdA,EAAIC,iBAAiBjB,EAAOkB,cACH,SAAzBF,EAAIC,MAAME,IAAIC,WAItB,GAAuB,IAAnBX,EAAQY,OAER,YADArB,EAAOO,OAAOe,uBAAuB,gCAKzC,IAAIC,EAAc,qBAAqBd,EAAQY,aAE/C,IAAK,MAAML,KAAOP,EACd,IACI,GAAIO,EAAIC,iBAAiBjB,EAAOkB,aAAc,CAC1C,MAAMM,QAAiBxB,EAAOK,UAAUoB,iBAAiBT,EAAIC,MAAME,KAC7DO,EAAWF,EAASL,IAAIQ,OACxBC,EAAeC,EAAKC,SAAS1B,EAAgBe,IAAIQ,OAAQD,GACzDK,EAAcP,EAASQ,UAE7BC,QAAQC,IAAI,oBAAoBN,KAEhCL,GAAe,aAAaK,UAC5BL,GAAe,GAAGQ,MAClBR,GAAe,cAAcK,WACjC,CACJ,CAAE,MAAOO,GACLF,QAAQG,MAAM,wBAAwBpB,EAAIqB,SAAUF,EACxD,CAIJ,MAAMG,EAAcT,EAAKU,KAAKnC,EAAgBe,IAAIQ,OAAQ,eAC1Da,EAAGC,cAAcH,EAAaf,SAGxBvB,EAAO0C,IAAIC,UAAUC,UAAUrB,GAErCvB,EAAOO,OAAOe,uBACV,SAASb,EAAQY,sDAEzB,CAAE,MAAOe,GACLH,QAAQG,MAAM,yBAA0BA,GACxCpC,EAAOO,OAAOC,iBAAiB,+BAA+B4B,IAClE,KAGJtC,EAAQ+C,cAAcC,KAAK/C,EAC/B,EAEA,wBAA+B,EApE/B,eACA,SACA,Q","sources":["webpack://file-list-saver/external commonjs \"vscode\"","webpack://file-list-saver/external node-commonjs \"fs\"","webpack://file-list-saver/external node-commonjs \"path\"","webpack://file-list-saver/webpack/bootstrap","webpack://file-list-saver/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport function activate(context: vscode.ExtensionContext) {\n    let disposable = vscode.commands.registerCommand('file-list-saver.saveFileList', async () => {\n        try {\n            // Get workspace folder\n            const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n            if (!workspaceFolder) {\n                vscode.window.showErrorMessage('No workspace folder is open.');\n                return;\n            }\n\n            // Get all tabs from all tab groups\n            const allTabs = vscode.window.tabGroups.all.flatMap(group =>\n                group.tabs.filter(tab =>\n                    tab.input instanceof vscode.TabInputText &&\n                    tab.input.uri.scheme === 'file'\n                )\n            );\n\n            if (allTabs.length === 0) {\n                vscode.window.showInformationMessage('No files are currently open.');\n                return;\n            }\n\n            // Create content with relative paths and file contents\n            let fullContent = `Total open files: ${allTabs.length}\\n\\n`;\n\n            for (const tab of allTabs) {\n                try {\n                    if (tab.input instanceof vscode.TabInputText) {\n                        const document = await vscode.workspace.openTextDocument(tab.input.uri);\n                        const filePath = document.uri.fsPath;\n                        const relativePath = path.relative(workspaceFolder.uri.fsPath, filePath);\n                        const fileContent = document.getText();\n\n                        console.log(`Processing file: ${relativePath}`); // Debug log\n\n                        fullContent += `### File: ${relativePath} ###\\n`;\n                        fullContent += `${fileContent}\\n`;\n                        fullContent += `### End of ${relativePath} ###\\n\\n`;\n                    }\n                } catch (err) {\n                    console.error(`Error processing tab ${tab.label}:`, err);\n                }\n            }\n\n            // Save to content.txt in workspace root\n            const contentPath = path.join(workspaceFolder.uri.fsPath, 'content.txt');\n            fs.writeFileSync(contentPath, fullContent);\n\n            // Copy to clipboard\n            await vscode.env.clipboard.writeText(fullContent);\n\n            vscode.window.showInformationMessage(\n                `Saved ${allTabs.length} files to content.txt and copied to clipboard`\n            );\n        } catch (error) {\n            console.error('Error in saveFileList:', error);\n            vscode.window.showErrorMessage(`Error saving file contents: ${error}`);\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nexport function deactivate() { }\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","disposable","vscode","commands","registerCommand","async","workspaceFolder","workspace","workspaceFolders","window","showErrorMessage","allTabs","tabGroups","all","flatMap","group","tabs","filter","tab","input","TabInputText","uri","scheme","length","showInformationMessage","fullContent","document","openTextDocument","filePath","fsPath","relativePath","path","relative","fileContent","getText","console","log","err","error","label","contentPath","join","fs","writeFileSync","env","clipboard","writeText","subscriptions","push"],"sourceRoot":""}