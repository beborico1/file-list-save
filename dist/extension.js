(()=>{"use strict";var e={398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},o={};function r(t){var s=o[t];if(void 0!==s)return s.exports;var n=o[t]={exports:{}};return e[t](n,n.exports,r),n.exports}var t={};(()=>{var e=t;Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(e){let r=o.commands.registerCommand("massive-copy.copySelected",(async()=>{try{const e=o.workspace.getConfiguration("massive-copy").get("allowedExtensions",[".py",".js",".ts",".jsx",".tsx",".html",".css",".json"]);await async function(e){const r=o.workspace.workspaceFolders?.[0];if(!r)return void o.window.showErrorMessage("No workspace folder is open.");const t=o.window.tabGroups.all.flatMap((r=>r.tabs.filter((r=>r.input instanceof o.TabInputText&&"file"===r.input.uri.scheme&&e.includes(s.extname(r.input.uri.fsPath))))));if(0===t.length)return void o.window.showInformationMessage("No matching files are currently open.");let n=`Total open files: ${t.length}\n\n`;for(const e of t)if(e.input instanceof o.TabInputText){const t=await o.workspace.openTextDocument(e.input.uri),i=s.relative(r.uri.fsPath,t.uri.fsPath);n+=`### File: ${i} ###\n${t.getText()}\n### End of ${i} ###\n\n`}await o.env.clipboard.writeText(n),o.window.showInformationMessage(`Copied ${t.length} files to clipboard`)}(e)}catch(e){console.error("Error in copySelected:",e),o.window.showErrorMessage(`Error copying files: ${e}`)}})),t=o.commands.registerCommand("massive-copy.copyRepo",(async()=>{try{const e=o.workspace.getConfiguration("massive-copy").get("excludeFolders",["node_modules","venv",".git"]);await async function(e){const r=o.workspace.workspaceFolders?.[0];if(!r)return void o.window.showErrorMessage("No workspace folder is open.");let t="";const a=await i(r.uri.fsPath,e);for(const e of a){const o=s.relative(r.uri.fsPath,e);t+=`### File: ${o} ###\n${n.readFileSync(e,"utf8")}\n### End of ${o} ###\n\n`}await o.env.clipboard.writeText(t),o.window.showInformationMessage("Copied repository contents to clipboard")}(e)}catch(e){console.error("Error in copyRepo:",e),o.window.showErrorMessage(`Error copying repository: ${e}`)}}));e.subscriptions.push(r,t)};const o=r(398),s=r(928),n=r(896);async function i(e,o){const r=n.readdirSync(e,{withFileTypes:!0}),t=[];for(const n of r){const r=s.join(e,n.name);n.isDirectory()?o.includes(n.name)||t.push(...await i(r,o)):t.push(r)}return t}})(),module.exports=t})();