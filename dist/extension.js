(()=>{"use strict";var e={398:e=>{e.exports=require("vscode")},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")}},o={};function t(s){var n=o[s];if(void 0!==n)return n.exports;var r=o[s]={exports:{}};return e[s](r,r.exports,t),r.exports}var s={};(()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(e){let t=o.commands.registerCommand("massive-copy.copySelected",(async()=>{try{const e=o.workspace.getConfiguration("massive-copy").get("allowedExtensions",[".py",".js",".ts",".jsx",".tsx",".html",".css",".json",".prisma"]);await async function(e){const t=o.workspace.workspaceFolders?.[0];if(!t)return void a("No workspace folder is open.");const s=o.window.tabGroups.all.flatMap((t=>t.tabs.filter((t=>t.input instanceof o.TabInputText&&"file"===t.input.uri.scheme&&e.includes(n.extname(t.input.uri.fsPath))))));if(0===s.length)return void i("No matching files are currently open.");let r="";for(const e of s)if(e.input instanceof o.TabInputText){const s=await o.workspace.openTextDocument(e.input.uri),i=n.relative(t.uri.fsPath,s.uri.fsPath);r+=`### File: ${i} ###\n${s.getText()}\n### End of ${i} ###\n\n`}await o.env.clipboard.writeText(r),i(`Copied ${s.length} files to clipboard`)}(e)}catch(e){console.error("Error in copySelected:",e),a(`Error copying files: ${e}`)}})),s=o.commands.registerCommand("massive-copy.copyRepo",(async()=>{try{const e=o.workspace.getConfiguration("massive-copy"),t=e.get("excludeFolders",["node_modules","venv",".git"]),s=e.get("allowedExtensions",[".py",".js",".ts",".jsx",".tsx",".html",".css",".json",".prisma"]);await async function(e,t){const s=o.workspace.workspaceFolders?.[0];if(!s)return void a("No workspace folder is open.");let p="";const l=await c(s.uri.fsPath,e,t);if(0!==l.length){for(const e of l){const o=n.relative(s.uri.fsPath,e);p+=`### File: ${o} ###\n${r.readFileSync(e,"utf8")}\n### End of ${o} ###\n\n`}await o.env.clipboard.writeText(p),i(`Copied ${l.length} repository files to clipboard`)}else i("No matching files found in repository.")}(t,s)}catch(e){console.error("Error in copyRepo:",e),a(`Error copying repository: ${e}`)}}));e.subscriptions.push(t,s)};const o=t(398),n=t(928),r=t(896);function i(e,t=!1,s=3e3){const n=t?o.window.showErrorMessage(e):o.window.showInformationMessage(e);setTimeout((()=>{n.then((e=>{e&&e.close?.()}))}),s)}function a(e){i(e,!0)}async function c(e,o,t){const s=r.readdirSync(e,{withFileTypes:!0}),i=[];for(const r of s){const s=n.join(e,r.name);r.isDirectory()?o.includes(r.name)||i.push(...await c(s,o,t)):t.includes(n.extname(s))&&i.push(s)}return i}})(),module.exports=s})();